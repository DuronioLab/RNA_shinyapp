}
df <- data.frame(matrix(NA, ncol = 4, nrow = length(seqs)))
for(i in 1:length(seqs)){
oligo <- paste(N,seqs[i],N,sep = "")
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
df$X1[i] <- seqs[i]
df$X2[i] <- result$code
}
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == 18){
df$X3[i] <- rnd
df$X4[i] <- paste(substring(rnd,1,9), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", substring(rnd,10,18), sep = "")
break
}
}
}
df
n
N
flank <- 10
# Make flanking "N"'s
N <- ""
for(i in 1:flank){
N <- paste(N,"N", sep = "")
}
df <- data.frame(matrix(NA, ncol = 4, nrow = length(seqs)))
for(i in 1:length(seqs)){
oligo <- paste(N,seqs[i],N,sep = "")
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
df$X1[i] <- seqs[i]
df$X2[i] <- result$code
}
df
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == 18){
df$X3[i] <- rnd
#df$X4[i] <- paste(substring(rnd,1,9), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", substring(rnd,10,18), sep = "")
break
}
}
}
i <- 1
oligo <- paste(N,seqs[i],N,sep = "")
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
result$code
#Length of flanking sequence
flank <- 27
for(i in 1:flank){
N <- paste(N,"N", sep = "")
}
oligo <- paste(N,seqs[i],N,sep = "")
oligo
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
oligo
seqs[i]
seqs
i
i <- 1
oligo <- paste(N,seqs[i],N,sep = "")
oligo
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
result$code
oligo <- "NNNNNNNNNNNNNNNNCGATCGCGATCGCGATCGNNNNNNNNNNNNNNNN"
i
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
result$code
oligo <- "NNNNNNNNNNCGATCGCGATCGCGATCGCGATCGCGATCGNNNNNNNNNN"
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
result$code
#Enzyme sequences to flank with n number of "N"'s and to exclude from each other.
seqs <- c('CGATCG','GAGCTC','CCCGGG','GAATTC','AAGCTT','GGTACC','CATATG','GCTAGC','ATCGAT','GCATGC','CCATGG','TCTAGA','ACTAGT','ATGCAT')
#Length of flanking sequence
flank <- 6
# Make flanking "N"'s
N <- ""
for(i in 1:flank){
N <- paste(N,"N", sep = "")
}
df <- data.frame(matrix(NA, ncol = 4, nrow = length(seqs)))
for(i in 1:length(seqs)){
oligo <- paste(N,seqs[i],N,sep = "")
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
df$X1[i] <- seqs[i]
df$X2[i] <- result$code
}
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == 18){
df$X3[i] <- rnd
#df$X4[i] <- paste(substring(rnd,1,9), "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", substring(rnd,10,18), sep = "")
break
}
}
}
print(df)
#Enzyme sequences to flank with n number of "N"'s and to exclude from each other.
seqs <- c('GACGTC','GACGTC','GTGCAC','CCTAGG','CACGTG')
#Enzyme sequences to flank with n number of "N"'s and to exclude from each other.
seqs <- c('GACGTC','GACGTC','GTGCAC','CCTAGG','CACGTG')
#Length of flanking sequence
flank <- 1
# Make flanking "N"'s
N <- ""
for(i in 1:flank){
N <- paste(N,"N", sep = "")
}
df <- data.frame(matrix(NA, ncol = 3, nrow = length(seqs)))
for(i in 1:length(seqs)){
oligo <- paste(N,seqs[i],N,sep = "")
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
df$X1[i] <- seqs[i]
df$X2[i] <- result$code
}
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == 18){
df$X3[i] <- rnd
break
}
}
}
print(df)
#Enzyme sequences to flank with n number of "N"'s and to exclude from each other.
seqs <- c('GACGTC','GTGCAC','CCTAGG','CACGTG')
#Length of flanking sequence
flank <- 1
# Make flanking "N"'s
N <- ""
for(i in 1:flank){
N <- paste(N,"N", sep = "")
}
df <- data.frame(matrix(NA, ncol = 3, nrow = length(seqs)))
for(i in 1:length(seqs)){
oligo <- paste(N,seqs[i],N,sep = "")
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
df$X1[i] <- seqs[i]
df$X2[i] <- result$code
}
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == 18){
df$X3[i] <- rnd
break
}
}
}
print(df)
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == 18){
df$X3[i] <- rnd
break
}
}
}
print(df)
IUB_CODES
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == nchar(df$X2[1])){
df$X3[i] <- rnd
break
}
}
}
print(df)
#Enzyme sequences to flank with n number of "N"'s and to exclude from each other.
seqs <- c('GACGTC','GTGCAC','CCTAGG','CACGTG','NNNNNN','NNNNNN','NNNNNN','NNNNNN','NNNNNN','NNNNNN','NNNNNN','NNNNNN')
#Length of flanking sequence
flank <- 1
# Make flanking "N"'s
N <- ""
for(i in 1:flank){
N <- paste(N,"N", sep = "")
}
df <- data.frame(matrix(NA, ncol = 3, nrow = length(seqs)))
for(i in 1:length(seqs)){
oligo <- paste(N,seqs[i],N,sep = "")
result <- cutfree(sites=seqs[-i], starting_oligo = oligo, quiet = TRUE)
df$X1[i] <- seqs[i]
df$X2[i] <- result$code
}
for(i in 1:nrow(df)){
rnd <-""
for(j in 1:nchar(df$X2[i])){
rnd <- paste(rnd, sample(IUB_CODES[[substring(df$X2[i],j,j)]], 1), sep = "")
if(j == nchar(df$X2[1])){
df$X3[i] <- rnd
break
}
}
}
print(df)
shiny::runApp('shiny_app')
head(test_hm)
length(test_hm)
heatmaply(test_hm)
heatmaply(test_hm, Rowv=FALSE, dendrogram = "column")
t <- heatmaply(test_hm, Rowv=FALSE, dendrogram = "column")
head(t)
View(t)
View(markus)
runApp('shiny_app')
runApp('shiny_app')
markus
runApp('shiny_app')
shiny::runApp('shiny_app')
markus
runApp('shiny_app')
markus
runApp('shiny_app')
q
markus
markus
shiny::runApp('shiny_app')
markus
runApp('shiny_app')
testShiny()
runTests()
runTests(./server.R)
runTests("./shiny")
runTests("../shiny")
recordTest()
install.packages("shinytest")
library(shinytest)
shinytest::installDependencies()
library(shinytest)
recordTest()
getwd()
getwd("shiny_app/")
recordTest("shiny_app/")
recordTest("shiny_app/")
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
markus
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
#q <- heatmaply::heatmaply(hm_data, Rowv=FALSE,dendrogram = "column")
#q <- heatmaply::heatmaply(test_hm, Rowv=FALSE,dendrogram = "column")
#q <- ggheatmap(test_hm)
q <- ggheatmap(test_hm,
show_cluster_cols = FALSE,
show_cluster_rows = FALSE)
q
ggheatmap(test_hm)
ggheatmap
ggheatmap()
ggheatmap(test_hm)
ggheatmap(test_hm,row_dend_left = FALSE)
q <- ggheatmap(test_hm,row_dend_left = FALSE)
q$elementID <- NULL
q
??ggheatmap()
ggheatmap(mtcars)
test_hm
ggheatmap(test_hm)
ggheatmap(test_hm) + geom_point()
print(ggheatmap(test_hm))
ggHeatmap(test_hm)
heatmap(mtcars)
x  <- as.matrix(datasets::mtcars)
heatmap(x)
ggheatmap(x)
dev.off()
ggheatmap(test_hm)
heatmap(x)
dev.off()
plot(rnorm(50), rnorm(50))
head(x)
heatmap(x)
heatmap(hm_data)
heatmap(test_hm)
ggheatmap(test_hm)
ggheatmap(test_hm, show_cluster_cols = FALSE)
ggheatmap(test_hm, row_dend_left = FALSE)
ggheatmap(test_hm, row_dend_left = FALSE)
heatmap(hm_data_image_out)
runApp('shiny_app')
q <- heatmap(test_hm,
Rowv = FALSE,
Colv = FALSE,
labRow = FALSE,
RowSideColors = cluster_info$color,
keep.dendro = FALSE)
q <- heatmap(test_hm,
Rowv = FALSE,
Colv = FALSE,
labRow = FALSE,
keep.dendro = FALSE)
q <- heatmap(test_hm,
labRow = FALSE,
keep.dendro = FALSE)
q <- heatmap(test_hm,
labRow = FALSE,
keep.dendro = FALSE)
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE)
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins =99)
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = 2)
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = 10)
z <- 11
length(z)
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = [10,50])
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = c[10,50])
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = c(10,50))
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = c(10,100))
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = c(10,10))
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE)
dev.off()
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE)
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = c(10,10))
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = c(0,20))
q <- heatmap(test_hm,
Rowv = NA,
Colv = NA,
labRow = FALSE,
keep.dendro = FALSE,
margins = c(20,10))
colnames(test_hm)
head(cluster_data_out)
grep("soma_l3mbt_mut_rep2", colnames(cluster_data_out))
grep("soma_l3mbt_mut-rep2", colnames(cluster_data_out))
colnames(cluster_data_out[grep("soma_l3mbt_mut-rep2", colnames(cluster_data_out))])
runApp('shiny_app')
colnames(cluster_table)
runApp('shiny_app')
colnames(cluster_table)
colnames(cluster_table[grep("soma_wt-rep2", colnames(cluster_table))]) <- "soma_wt-rep2"
colnames(cluster_table)
cluster_table[grep("soma_wt-rep2", colnames(cluster_table))])
cluster_table[grep("soma_wt-rep2", colnames(cluster_table))]
cluster_table[,9]
cluster_table[9,]
cluster_table[9,1]
colnames(cluster_table[1]
)
grep("soma_wt-rep2", colnames(cluster_table))
colnames(grep("soma_wt-rep2", colnames(cluster_table)))
colnames(cluster_table[grep("soma_wt-rep2", colnames(cluster_table))])
colnames(cluster_table[grep("soma_wt-rep2", colnames(cluster_table))]) <- "test"
colnames(cluster_table)
rename(cluster_table, sample_table$baseName[1] = colnames(cluster_table[grep(sample_table$[1], colnames(cluster_table))]))
colnames(cluster_table)[grep("soma_wt-rep2", colnames(cluster_table))] <- "test"
colnames(cluster_table)
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
length(colnames(cluster_table)[5]
)
length(colnames(cluster_table)[5,1])
length(colnames(cluster_table)[1,5])
length(colnames(cluster_table)[5])
length(colnames(cluster_table)[7])
colnames(cluster_table[4])
length(colnames(cluster_table[4]))
nchar(colnames(cluster_table[4]))
dev.off()
runApp('shiny_app')
ncol(test_hm)
nchar(colnames(test_hm[1]))
nchar(colnames(test_hm)[1])
runApp('shiny_app')
head(norm_counts)
runApp('shiny_app')
heatmap(hm_data_image_out, Rowv = NA, Colv = NA, labRow = FALSE)
??heatmap()
library(pheatmap)
library(hm_data_image_out)
pheatmap(hm_data_image_out)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = F)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = F, cutree_rows = 3)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = F, cutree_rows = 3, treeheight_row = 0, treeheight_col = 0)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, cutree_rows = 3, treeheight_row = 0, treeheight_col = 0)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = T,cutree_rows = 3, treeheight_row = 0, treeheight_col = 0)
head(hm_data_image_out)
head(hm_data_info_out)
head(hm_info_image_out)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = T,cutree_rows = 3, treeheight_row = 0, treeheight_col = 0, annotation_row = hm_info_image_out$clusters)
nrow(hm_info_image_out)
nrow(hm_data_image_out)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = T, treeheight_row = 0, treeheight_col = 0, annotation_row = hm_info_image_out$clusters)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = T,cutree_rows = 3, treeheight_row = 0, treeheight_col = 0, annotation_row = hm_info_image_out)
rownames(hm_info_image_out) <- rownames(hm_data_image_out)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = T,cutree_rows = 3, treeheight_row = 0, treeheight_col = 0, annotation_row = hm_info_image_out$clusters)
head(hm_data_image_out)
head(hm_info_image_out
)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = T,cutree_rows = 3, treeheight_row = 0, treeheight_col = 0, annotation_row = hm_info_image_out)
pheatmap(hm_data_image_out, annotation_names_row = F, show_rownames = F, show_colnames = T,cutree_rows = 5, treeheight_row = 0, treeheight_col = 0, annotation_row = hm_info_image_out)
test2 <- subset(hm_info_image_out, select = -color)
head(test2)
runApp('shiny_app')
length(hm_cluster_image_out)
hm_cluster_image_out
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
dev.off()
runApp('shiny_app')
runApp('shiny_app')
heatmap_image_out
pheatmap(heatmap_image_out, filename = "test.pdf")
runApp('shiny_app')
runApp('shiny_app')
log2fc_samples
runApp('shiny_app')
tmp <- dplyr::select(gtf_genes, gene_symbol, gene_id)
temp2 <- dplyr::left_join(tibble::rownames_to_column(all_logfc), tmp, by = c("rowname" = "gene_symbol"))
colnames(temp2)[1] <- "gene_symbol"
all_logfc <- temp2
for(i in 1:nrow(all_logfc)){
if(is.na(all_logfc$gene_id[i])){
fixed <- get_geneID(all_logfc$gene_symbol[i], gtf, current_fb_ids)
if(length(fixed) == 1){
all_logfc$gene_id[i] <- fixed
}
}else{
}
}
source('shiny_app/start_up.R')
exists(choices)
choices
runApp()
runApp()
runApp()
runApp()
